button,
.button {
	// Forced display props for iconography
	border-radius: 8px;
	display: inline-flex;
	align-items: center;
	justify-content: center;
	text-decoration: none;
	flex-shrink: 0;

	@include prefix( user-select, 'none' );
	
	padding: 1em 3em;
	color: #fff;
	background: map-get($palette, 'primary');
	box-shadow: 0 10px 10px -13px #000;
	border: 2px solid map-get($palette, 'primary');
	overflow: hidden;

	&,
	&:focus {
		outline: none;
	}

	&:hover {
		background: lighten(map-get($palette, 'primary'), 5%);
		box-shadow: 0 0 0 .325em rgba(map-get($palette, 'primary'), .2);
	}

	&:after {
		content: "";
		display: block;
		position: absolute;
		top: 50%;
		right: 1em;
		width: 1em;
		height: 1em;
		border-radius: 256px;
		border: .25em solid rgba(255,255,255,.25);
		border-top-color: #fff;
		transform: translateY(-50%) scale(0) rotate(0);
		transition: inherit;
		pointer-events: none;
		opacity: 1;
	}

	&.icon,
	&.icon-right {
		padding: 1em 0 1em 2em;
		//padding: 1em 0 1em 1.5em;
		
		svg {
			position: relative;

			border-top-right-radius:    inherit;
			border-bottom-right-radius: inherit;

			//padding: 1em;
			padding: calc(1em + 2px);
			margin: calc(-1em - 2px) -2px calc(-1em - 2px) 1.5em;
			width: 1.5em;
			height: 1.5em;
			background: rgba(0,0,0,.15);
			transition: inherit;

			& * {
				transition: inherit;
				transform-origin: center center;
				transform: translateZ(0) scale(1);
			}
		}

		&.unified {
			svg {
				background: transparent !important;
				margin: calc(-1em - 2px) .5em calc(-1em - 2px) -.25em;
			}
		}

		&.icon-left {
			flex-direction: row-reverse;
			//padding: 1em 1.5em 1em 0;
			padding: 1em 2em 1em 0;

			&:after {
				right: 0;
				left: 1em;
			}

			svg {
				border-top-right-radius:    0;
				border-bottom-right-radius: 0;
				border-top-left-radius:     inherit;
				border-bottom-left-radius:  inherit;

				margin: calc(-1em - 2px) 1.5em calc(-1em - 2px) -2px;
			}

			&.unified {
				svg {
					background: transparent;
					margin: calc(-1em - 2px) -.25em calc(-1em - 2px) .5em;
				}
			}
		}
	}

	&.primary {
		color: #fff !important;

		@if $palette {
			@each $name, $hex in $palette {
				&.#{$name}{
					background-color: $hex;
					border-color: $hex;

					&:hover {
						background: lighten($hex, 5%);
						box-shadow: 0 0 0 .325em rgba($hex, .2);
					}
				}
			}
		}
	}

	&.secondary {
		background-color: map-get($palette, 'secondary');
		color: most-legible-color( map-get($palette, 'secondary') );
		box-shadow: 0 0 0 2em rgba( map-get( $palette, 'gray' ), 0);
		border: 2px solid map-get($palette, 'secondary');
		
		&:hover {
			background: lighten(map-get($palette, 'secondary'), 5%);
			box-shadow: 0 0 0 .325em rgba( map-get($palette, 'gray'), .2);
		}

		&:after {
			border-color: rgba(0,0,0,.125);
			border-top-color: map-get($palette, 'primary');
		}

		&.icon {
			svg {
				background: rgba(0,0,0,.05);
			}
		}
	}

	&.tertiary,
	&.outline {
		background: transparent;
		color: map-get($palette, 'primary');
		border: 2px solid map-get($palette, 'primary');

		&:hover {
			background: #fff;
		}

		&:after,
		&.loading:after {
			border-color: rgba(0,0,0,.125);
			border-top-color: map-get($palette, 'primary');
		}

		&.icon {
			svg {
				padding: calc(1em + 2px);
				background: rgba(map-get($palette, 'primary'),.325);
			}
		}
	}

	&.loading {
		//box-shadow: 0 0 0 .175em rgba(map-get($palette, 'primary'), .35);
		box-shadow: none !important;
		pointer-events: none;
		filter: grayscale(.3) brightness(1.2);

		&:after {
			transform: translateY(-50%) scale(1) rotate(0);
			animation: .5s rotate-vertical-center linear forwards infinite;
			opacity: 1;
		}
		
		&:not([class*="icon"]){
			padding-right: 3.75em;
		}

		svg {
			background: rgba(0,0,0,.05);

			& * {
				transform: translateZ(0) scale(0);
			}
		}

		&.secondary {
			filter: none;
			box-shadow: 0 0 0 .175em rgba( map-get($palette, 'dark-gray'), .35);
		}
	}

	&.small, &.tiny {
		padding: .5em 2em;

		&:after {
			width: .75em;
			height: .75em;
			right: .75em;
			border-width: .125em
		}

		&.icon,
		&.icon-right {
			padding: .5em 0 .5em 1.25em;

			svg {
				//padding: .3125em 1em;
				padding: calc(0.7em + 2px) .75em;
				margin: -1em -2px -1em 1.25em;
				height: 1.15em;
				width: 1.15em;
			}

			&.unified {
				svg {
					padding-right: 1.25em;
					margin-left: -.125em;
				}
			}
		}

		&.icon-left {
			padding: .5em 1.25em .5em 0;

			svg {
				margin: -1em 1.25em -1em -2px;
			}

			&.unified {
				svg {
					padding-left: 1.25em;
					margin-right: -.125em;
				}
			}

			&:after {
				right: 0;
				left: .75em;
			}
		}

		&.loading {
			&:not([class*="icon"]){
				padding-right: 2.75em;
			}
		}
	}

	&.tiny {
		font-size: 10px;
	}

	&.outline,
	&.secondary,
	&.tertiary,
	&.quaternary {
		box-shadow: 0 10px 10px -15px #000 !important; // I like this style more?

		&.loading {
			box-shadow: none !important;
		}
	}

	&.blank {
		box-shadow: none !important;
		background: transparent;
		border-color: transparent;
		color: map-get($palette, 'primary');

		&:hover {
			background: rgba(map-get($palette, 'primary'), .15);
		}

		&.loading {
			&:after { border-top-color: map-get($palette, 'primary');  }
			background: rgba(map-get($palette, 'primary'), .3);	
		}
	}

	&:hover {
		box-shadow: none !important;
	}

	&.special {
		background: linear-gradient(-135deg, #0095EE 30%, #00D0DF 100%) !important;
		padding: calc(1em + 2px) calc(3em + 2px);
		border: none;
		color: #fff !important;

		&.icon,
		&.icon-right {
			padding: calc(1em + 2px) 0 calc(1em + 2px) calc(2em + 2px);

			&.icon-left {
				padding: calc(1em + 2px) calc(2em + 2px) calc(1em + 2px) 0;
			}

			svg {
				color: #fff !important;
				background: rgba(255,255,255,.15);
			}
		}

		&:hover {
			filter: brightness(110%);
		}
	}
}